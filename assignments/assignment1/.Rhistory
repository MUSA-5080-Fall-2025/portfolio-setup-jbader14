# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
install.packages("tidycensus")
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
key <- "773d2e38e1329313f36161c1ebc2a8861d99f570"
census_api_key(key)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "New Jersey"
# Load required packages (hint: you need tidycensus, tidyverse, and knitr)
library(tidycensus)
library(tidyverse)
library(knitr)
# Set your Census API key
key <- "773d2e38e1329313f36161c1ebc2a8861d99f570"
census_api_key(key)
# Choose your state for analysis - assign it to a variable called my_state
my_state <- "NJ"
# Write your get_acs() code here
nj_census <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
# Display the first few rows
nj_census.head(5)
head(nj_census)
# Write your get_acs() code here
nj_census <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
nj_census <- nj_census |>
mutate(
county_name = str_remove(NAME, ", New Jersey"),
county_name = str_remove(county_name, " County")
)
# Display the first few rows
head(nj_census)
# Write your get_acs() code here
nj_census <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "IL",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
# Display the first few rows
nj_census
# Write your get_acs() code here
nj_census <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
nj_census <- nj_census |>
mutate(
county_name = str_remove(NAME, ", New Jersey"),
county_name = str_remove(county_name, " County")
)
# Display the first few rows
head(nj_census)
# Write your get_acs() code here
nj_census <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
nj_census <- nj_census |>
# Remove state name and "County"
mutate(
county_name = str_remove(NAME, ", New Jersey"),
county_name = str_remove(county_name, " County")
) |>
# Drop NAME column
select(-NAME)
# Display the first few rows
head(nj_census)
# Write your get_acs() code here
nj_inc_pop <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
nj_inc_pop <- nj_inc_pop |>
# Remove state name and "County"
mutate(
county_name = str_remove(NAME, ", New Jersey"),
county_name = str_remove(county_name, " County")
) |>
# Drop NAME column
select(-NAME)
# Display the first few rows
head(nj_inc_pop)
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percentage <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
count(reliability, name = "n") |>
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
) |
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
count(reliability, name = "n") |>
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
reliability_percent
nj_reli_summary
View(nj_reli)
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
# Count the number of counties per reliability category
count(reliability, name = "n") |>
# Add percentages - count(county) / count(all)
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
# Display summary table
nj_reli_summary
# Write your get_acs() code here
nj_inc_pop <- get_acs(
geography = "county",
variables = c(
median_income = "B19013_001",
total_pop = "B01003_001"
),
state = "NJ",
year = 2022,
survey = "acs5",
output = "wide"
)
# Clean the county names to remove state name and "County"
# Hint: use mutate() with str_remove()
nj_inc_pop <- nj_inc_pop |>
# Remove state name and "County"
mutate(
county_name = str_remove(NAME, ", New Jersey"),
county_name = str_remove(county_name, " County")
) |>
# Drop NAME column
select(-NAME)
# Display the first few rows
head(nj_inc_pop, 5)
View(nj_reli)
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe = median_incomeM / median_incomeE,
moe_percent = round((moe) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
# Count the number of counties per reliability category
count(reliability, name = "n") |>
# Add percentages - count(county) / count(all)
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
# Display summary table
nj_reli_summary
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe = round(median_incomeM / median_incomeE, 4),
moe_percent = moe * 100,
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
# Count the number of counties per reliability category
count(reliability, name = "n") |>
# Add percentages - count(county) / count(all)
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
# Display summary table
nj_reli_summary
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
# Count the number of counties per reliability category
count(reliability, name = "n") |>
# Add percentages - count(county) / count(all)
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
# Display summary table
nj_reli_summary
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
head(5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability)
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice(5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability)
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability)
# Calculate MOE percentage and reliability categories using mutate()
nj_reli <- nj_inc_pop |>
mutate(
# Compute MOE percentage
moe_percent = round((median_incomeM / median_incomeE) * 100, 2),
# Create reliability categories
reliability = case_when(
moe_percent < 5 ~ "High Confidence",
moe_percent >= 5 & moe_percent <= 10 ~ "Moderate",
moe_percent > 10 ~ "Low Confidence"
)
)
# Create a summary showing count of counties in each reliability category
# Hint: use count() and mutate() to add percentages
nj_reli_summary <- nj_reli |>
# Count the number of counties per reliability category
count(reliability, name = "n") |>
# Add percentages - count(county) / count(all)
mutate(
reliability_percent = round(100 * n / sum(n), 1),
reliability_percent = paste0(reliability_percent, "%")
)
# Display summary table
nj_reli_summary
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percentage, reliability)
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percent, reliability)
# Format as table with kable() - include appropriate column names and caption
kable(nj_top_moe,
col.names = c("County", "Median Income", "MOE", "MOE %", "Reliabilty"),
caption = "NJ Counties with the Highest Income Data Uncertainty",
format.args = list(big.mark = ","))
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
# slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percent, reliability)
# Format as table with kable() - include appropriate column names and caption
kable(nj_top_moe,
col.names = c("County", "Median Income", "MOE", "MOE %", "Reliabilty"),
caption = "NJ Counties with the Highest Income Data Uncertainty",
format.args = list(big.mark = ","))
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percent, reliability)
# Format as table with kable() - include appropriate column names and caption
kable(nj_top_moe,
col.names = c("County", "Median Income", "MOE", "MOE %", "Reliabilty"),
caption = "NJ Counties with the Highest Income Data Uncertainty",
format.args = list(big.mark = ","))
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
# slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percent, reliability)
# Format as table with kable() - include appropriate column names and caption
kable(nj_top_moe,
col.names = c("County", "Median Income", "MOE", "MOE %", "Reliabilty"),
caption = "NJ Counties with the Highest Income Data Uncertainty",
format.args = list(big.mark = ","))
# Create table of top 5 counties by MOE percentage
nj_top_moe <- nj_reli |>
# Sort by DESC MOE percent
arrange(desc(moe_percent)) |>
# Select top 5 counties
slice_head(n = 5) |>
# Select columns
select(county_name, median_incomeE, median_incomeM, moe_percent, reliability)
# Format as table with kable() - include appropriate column names and caption
kable(nj_top_moe,
col.names = c("County", "Median Income", "MOE", "MOE %", "Reliabilty"),
caption = "NJ Counties with the Highest Income Data Uncertainty",
format.args = list(big.mark = ","))
