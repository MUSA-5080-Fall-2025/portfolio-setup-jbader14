{
  "hash": "c94545017424379c03fd138c204c568d",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Lab 0: Getting Started with dplyr\"\nsubtitle: \"Your First Data Analysis\"\nauthor: \"Henry (Jack) Bader\"\ndate: today\nformat: \n  html:\n    code-fold: false\n    toc: true\n    toc-location: left\n    theme: cosmo\nexecute:\n  warning: false\n  message: false\n---\n\n# Overview\n\nWelcome to your first lab! In this (not graded) assignment, you'll practice the fundamental dplyr operations I overviewed in class using car sales data. This lab will help you get comfortable with:\n\n- Basic data exploration\n- Column selection and manipulation  \n- Creating new variables\n- Filtering data\n- Grouping and summarizing\n\n**Instructions:** Copy this template into your portfolio repository under a `lab_0/` folder, then complete each section with your code and answers. You will write the code under the comment section in each chunk.\nBe sure to also copy the data folder into your `lab_0` folder.\n\n# Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the tidyverse library\nlibrary(tidyverse)\n\n# Read in the car sales data\n# Make sure the data file is in your lab_0/data/ folder\ncar_data <- read_csv(\"data/car_sales_data.csv\")\n```\n:::\n\n\n# Exercise 1: Getting to Know Your Data\n\n## 1.1 Data Structure Exploration\n\nExplore the structure of your data and answer these questions:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Use glimpse() to see the data structure\nglimpse(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 50,000\nColumns: 7\n$ Manufacturer          <chr> \"Ford\", \"Porsche\", \"Ford\", \"Toyota\", \"VW\", \"Ford…\n$ Model                 <chr> \"Fiesta\", \"718 Cayman\", \"Mondeo\", \"RAV4\", \"Polo\"…\n$ `Engine size`         <dbl> 1.0, 4.0, 1.6, 1.8, 1.0, 1.4, 1.8, 1.4, 1.2, 2.0…\n$ `Fuel type`           <chr> \"Petrol\", \"Petrol\", \"Diesel\", \"Hybrid\", \"Petrol\"…\n$ `Year of manufacture` <dbl> 2002, 2016, 2014, 1988, 2006, 2018, 2010, 2015, …\n$ Mileage               <dbl> 127300, 57850, 39190, 210814, 127869, 33603, 866…\n$ Price                 <dbl> 3074, 49704, 24072, 1705, 4101, 29204, 14350, 30…\n```\n\n\n:::\n\n```{.r .cell-code}\n# Check the column names\ncolnames(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Manufacturer\"        \"Model\"               \"Engine size\"        \n[4] \"Fuel type\"           \"Year of manufacture\" \"Mileage\"            \n[7] \"Price\"              \n```\n\n\n:::\n\n```{.r .cell-code}\n# Look at the first few rows\nhead(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 6 × 7\n  Manufacturer Model     `Engine size` `Fuel type` `Year of manufacture` Mileage\n  <chr>        <chr>             <dbl> <chr>                       <dbl>   <dbl>\n1 Ford         Fiesta              1   Petrol                       2002  127300\n2 Porsche      718 Caym…           4   Petrol                       2016   57850\n3 Ford         Mondeo              1.6 Diesel                       2014   39190\n4 Toyota       RAV4                1.8 Hybrid                       1988  210814\n5 VW           Polo                1   Petrol                       2006  127869\n6 Ford         Focus               1.4 Petrol                       2018   33603\n# ℹ 1 more variable: Price <dbl>\n```\n\n\n:::\n:::\n\n\n**Questions to answer:**\n- How many rows and columns does the dataset have?\n- What types of variables do you see (numeric, character, etc.)?\n- Are there any column names that might cause problems? Why?\n\n**Your answers:**\n- Rows: 50,000\n- Columns: 7  \n- Variable types: Character, double\n- Problematic names:\"Engine size\", \"Fuel type\", \"Year of manufacture\" are problematic since they have spaces in their names. When we call them, we must wrap these names in quotation marks as shown above.\n\n## 1.2 Tibble vs Data Frame\n\nCompare how tibbles and data frames display:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Look at the tibble version (what we have)\ncar_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 7\n   Manufacturer Model    `Engine size` `Fuel type` `Year of manufacture` Mileage\n   <chr>        <chr>            <dbl> <chr>                       <dbl>   <dbl>\n 1 Ford         Fiesta             1   Petrol                       2002  127300\n 2 Porsche      718 Cay…           4   Petrol                       2016   57850\n 3 Ford         Mondeo             1.6 Diesel                       2014   39190\n 4 Toyota       RAV4               1.8 Hybrid                       1988  210814\n 5 VW           Polo               1   Petrol                       2006  127869\n 6 Ford         Focus              1.4 Petrol                       2018   33603\n 7 Ford         Mondeo             1.8 Diesel                       2010   86686\n 8 Toyota       Prius              1.4 Hybrid                       2015   30663\n 9 VW           Polo               1.2 Petrol                       2012   73470\n10 Ford         Focus              2   Diesel                       1992  262514\n# ℹ 49,990 more rows\n# ℹ 1 more variable: Price <dbl>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Convert to regular data frame and display\ncar_df <- as.data.frame(car_data)\nhead(car_df, 50) # Changed for better render\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   Manufacturer      Model Engine size Fuel type Year of manufacture Mileage\n1          Ford     Fiesta         1.0    Petrol                2002  127300\n2       Porsche 718 Cayman         4.0    Petrol                2016   57850\n3          Ford     Mondeo         1.6    Diesel                2014   39190\n4        Toyota       RAV4         1.8    Hybrid                1988  210814\n5            VW       Polo         1.0    Petrol                2006  127869\n6          Ford      Focus         1.4    Petrol                2018   33603\n7          Ford     Mondeo         1.8    Diesel                2010   86686\n8        Toyota      Prius         1.4    Hybrid                2015   30663\n9            VW       Polo         1.2    Petrol                2012   73470\n10         Ford      Focus         2.0    Diesel                1992  262514\n11           VW       Golf         2.0    Diesel                2014   83047\n12          BMW         Z4         2.0    Petrol                1990  293666\n13           VW       Golf         1.2    Diesel                2007   92697\n14       Toyota       RAV4         2.2    Petrol                2007   79393\n15       Toyota      Yaris         1.4    Petrol                1998   97286\n16           VW       Golf         1.6    Diesel                1989  222390\n17       Toyota       RAV4         2.4    Hybrid                2003  117425\n18       Toyota      Yaris         1.2    Petrol                1992  245990\n19       Toyota       RAV4         2.0    Hybrid                2018   28381\n20           VW       Polo         1.2    Petrol                1998  155038\n21           VW       Golf         1.2    Hybrid                1987  121744\n22         Ford     Mondeo         1.6    Diesel                1996   77584\n23       Toyota      Prius         1.0    Hybrid                2003  115291\n24       Toyota      Prius         1.0    Hybrid                1990  238571\n25      Porsche        911         2.6    Petrol                2009   66273\n26       Toyota      Prius         1.8    Hybrid                2017   31958\n27      Porsche        911         3.5    Petrol                2005  151556\n28       Toyota      Yaris         1.2    Petrol                2002  179097\n29           VW       Golf         2.0    Petrol                2020   18985\n30       Toyota       RAV4         1.8    Hybrid                2002   66990\n31         Ford      Focus         1.0    Hybrid                2010   85131\n32         Ford     Fiesta         1.0    Petrol                2001  144731\n33           VW       Polo         2.0    Diesel                2008   97001\n34           VW       Polo         1.6    Petrol                2016   52409\n35         Ford     Fiesta         1.4    Petrol                2010  112714\n36           VW     Passat         2.0    Diesel                1992  198540\n37           VW     Passat         1.8    Diesel                1989  213162\n38          BMW         Z4         2.2    Petrol                2005  133174\n39           VW       Polo         1.6    Petrol                2008  129588\n40          BMW         Z4         2.0    Petrol                1990  148586\n41         Ford      Focus         2.0    Petrol                1995   91173\n42          BMW         M5         4.0    Petrol                2017   22759\n43           VW       Polo         1.4    Petrol                1990  261526\n44           VW     Passat         1.4    Diesel                1995  235594\n45          BMW         Z4         2.0    Petrol                1995   42759\n46           VW     Passat         1.8    Diesel                2005  103352\n47           VW     Passat         1.6    Petrol                2003   63372\n48       Toyota      Yaris         1.0    Petrol                2009   51787\n49         Ford     Fiesta         1.4    Petrol                2014   41495\n50       Toyota      Yaris         1.4    Petrol                2010   43111\n   Price\n1   3074\n2  49704\n3  24072\n4   1705\n5   4101\n6  29204\n7  14350\n8  30297\n9   9977\n10  1049\n11 17173\n12   719\n13  7792\n14 16026\n15  4046\n16   933\n17 11667\n18   720\n19 52671\n20  2118\n21  1890\n22  5667\n23  6512\n24   961\n25 41963\n26 38961\n27 19747\n28  2548\n29 36387\n30 13553\n31 12472\n32  2503\n33  8784\n34 17257\n35  6936\n36  1964\n37  1340\n38  8511\n39  5848\n40  2637\n41  5181\n42 97758\n43   522\n44  1439\n45  7873\n46  9633\n47 10001\n48  9689\n49 14721\n50 12928\n```\n\n\n:::\n:::\n\n\n**Question:** What differences do you notice in how they print?\n\n**Your answer:** Tibble will only display the first 10 rows with total number of rows and columns as well as column types as additional info. It also only shows a certain number of columns (in this case, only 6 of 7 columns displayed).\n\n# Exercise 2: Basic Column Operations\n\n## 2.1 Selecting Columns\n\nPractice selecting different combinations of columns:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Select just Model and Mileage columns\nmodel_mile <- select(car_data, Model, Mileage)\nhead(model_mile, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Model      Mileage\n  <chr>        <dbl>\n1 Fiesta      127300\n2 718 Cayman   57850\n3 Mondeo       39190\n4 RAV4        210814\n5 Polo        127869\n```\n\n\n:::\n\n```{.r .cell-code}\n# Select Manufacturer, Price, and Fuel type\nmanuf_price_fuel <- select(car_data, Manufacturer, Price, \"Fuel type\")\nhead(manuf_price_fuel, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  Manufacturer Price `Fuel type`\n  <chr>        <dbl> <chr>      \n1 Ford          3074 Petrol     \n2 Porsche      49704 Petrol     \n3 Ford         24072 Diesel     \n4 Toyota        1705 Hybrid     \n5 VW            4101 Petrol     \n```\n\n\n:::\n\n```{.r .cell-code}\n# Challenge: Select all columns EXCEPT Engine Size\nexcept_engine <- select(car_data, -\"Engine size\")\nhead(except_engine, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 6\n  Manufacturer Model      `Fuel type` `Year of manufacture` Mileage Price\n  <chr>        <chr>      <chr>                       <dbl>   <dbl> <dbl>\n1 Ford         Fiesta     Petrol                       2002  127300  3074\n2 Porsche      718 Cayman Petrol                       2016   57850 49704\n3 Ford         Mondeo     Diesel                       2014   39190 24072\n4 Toyota       RAV4       Hybrid                       1988  210814  1705\n5 VW           Polo       Petrol                       2006  127869  4101\n```\n\n\n:::\n:::\n\n\n## 2.2 Renaming Columns\n\nLet's fix a problematic column name:\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Rename 'Year of manufacture' to year\ncar_data <- car_data |>\n    rename(\n    year = `Year of manufacture`,\n    engine_size = `Engine size`,\n    fuel = `Fuel type`\n  )\n\n# Check that it worked\nnames(car_data)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Manufacturer\" \"Model\"        \"engine_size\"  \"fuel\"         \"year\"        \n[6] \"Mileage\"      \"Price\"       \n```\n\n\n:::\n:::\n\n\n**Question:** Why did we need backticks around `Year of manufacture` but not around `year`?\n\n**Your answer:** Because 'year' has no spaces in its variable name.\n\n# Exercise 3: Creating New Columns\n\n## 3.1 Calculate Car Age\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create an 'age' column (2025 minus year of manufacture)\n# Create a mileage_per_year column \ncar_data <- car_data |>\n  mutate(age = 2025 - year,\n         mileage_per_year = Mileage / age)\n\n# Look at your new columns\nselect(car_data, Model, year, age, Mileage, mileage_per_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 5\n   Model       year   age Mileage mileage_per_year\n   <chr>      <dbl> <dbl>   <dbl>            <dbl>\n 1 Fiesta      2002    23  127300            5535.\n 2 718 Cayman  2016     9   57850            6428.\n 3 Mondeo      2014    11   39190            3563.\n 4 RAV4        1988    37  210814            5698.\n 5 Polo        2006    19  127869            6730.\n 6 Focus       2018     7   33603            4800.\n 7 Mondeo      2010    15   86686            5779.\n 8 Prius       2015    10   30663            3066.\n 9 Polo        2012    13   73470            5652.\n10 Focus       1992    33  262514            7955.\n# ℹ 49,990 more rows\n```\n\n\n:::\n:::\n\n\n## 3.2 Categorize Cars\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create a price_category column where if price is < 15000, its is coded as budget, between 15000 and 30000 is midrange and greater than 30000 is mid-range (use case_when)\ncar_data <- car_data |>\n  mutate(price_category = case_when(\n    Price < 15000 ~ \"budget\", \n    between(Price, 15000, 30000) ~ \"midrange\",\n    TRUE ~ \"luxury\"))\n\n# Check your categories select the new column and show it\nselect(car_data, price_category)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 1\n   price_category\n   <chr>         \n 1 budget        \n 2 luxury        \n 3 midrange      \n 4 budget        \n 5 budget        \n 6 midrange      \n 7 budget        \n 8 luxury        \n 9 budget        \n10 budget        \n# ℹ 49,990 more rows\n```\n\n\n:::\n:::\n\n\n# Exercise 4: Filtering Practice\n\n## 4.1 Basic Filtering\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find all Toyota cars\ntoyota <- car_data |>\n  filter(Manufacturer == \"Toyota\")\nhead(toyota, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Manufacturer Model engine_size fuel    year Mileage Price   age\n  <chr>        <chr>       <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n1 Toyota       RAV4          1.8 Hybrid  1988  210814  1705    37\n2 Toyota       Prius         1.4 Hybrid  2015   30663 30297    10\n3 Toyota       RAV4          2.2 Petrol  2007   79393 16026    18\n4 Toyota       Yaris         1.4 Petrol  1998   97286  4046    27\n5 Toyota       RAV4          2.4 Hybrid  2003  117425 11667    22\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find cars with mileage less than 30,000\nmile_less_30000 <- car_data |>\n  filter(Mileage < 30000)\nhead(mile_less_30000, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Manufacturer Model engine_size fuel    year Mileage Price   age\n  <chr>        <chr>       <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n1 Toyota       RAV4          2   Hybrid  2018   28381 52671     7\n2 VW           Golf          2   Petrol  2020   18985 36387     5\n3 BMW          M5            4   Petrol  2017   22759 97758     8\n4 Toyota       RAV4          2.4 Petrol  2018   24588 49125     7\n5 VW           Golf          2   Hybrid  2018   25017 36957     7\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find luxury cars (from price category) with low mileage\n# ASSUMING low mileage is less than 30000 from part 2\nluxury_low_mile <- mile_less_30000 |>\n  filter(price_category == \"luxury\")\nhead(luxury_low_mile, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Manufacturer Model engine_size fuel    year Mileage Price   age\n  <chr>        <chr>       <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n1 Toyota       RAV4          2   Hybrid  2018   28381 52671     7\n2 VW           Golf          2   Petrol  2020   18985 36387     5\n3 BMW          M5            4   Petrol  2017   22759 97758     8\n4 Toyota       RAV4          2.4 Petrol  2018   24588 49125     7\n5 VW           Golf          2   Hybrid  2018   25017 36957     7\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n:::\n\n\n## 4.2 Multiple Conditions\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Find cars that are EITHER Honda OR Nissan\nhonda_nissan <- car_data |>\n    filter(Manufacturer %in% c(\"Honda\", \"Nissan\"))\nhead(honda_nissan, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 0 × 10\n# ℹ 10 variables: Manufacturer <chr>, Model <chr>, engine_size <dbl>,\n#   fuel <chr>, year <dbl>, Mileage <dbl>, Price <dbl>, age <dbl>,\n#   mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# NO NISSAN OR HONDA IN DATASET\n\n# Find cars with price between $20,000 and $35,000\nprice_20k_35k <- car_data |>\n  filter(Price > 20000 & Price < 35000)\nhead(price_20k_35k, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Manufacturer Model  engine_size fuel    year Mileage Price   age\n  <chr>        <chr>        <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n1 Ford         Mondeo         1.6 Diesel  2014   39190 24072    11\n2 Ford         Focus          1.4 Petrol  2018   33603 29204     7\n3 Toyota       Prius          1.4 Hybrid  2015   30663 30297    10\n4 Toyota       Prius          1.4 Hybrid  2016   43893 29946     9\n5 Toyota       Prius          1.4 Hybrid  2016   43130 30085     9\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\n# Find diesel cars less than 10 years old\ndiesel_less_10_year <- car_data |>\n  filter(fuel == \"Diesel\" & age < 10)\nhead(diesel_less_10_year, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 10\n  Manufacturer Model  engine_size fuel    year Mileage Price   age\n  <chr>        <chr>        <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n1 Ford         Fiesta         1   Diesel  2017   38370 16257     8\n2 VW           Passat         1.6 Diesel  2018   22122 36634     7\n3 VW           Passat         1.4 Diesel  2020   21413 39310     5\n4 BMW          X3             2   Diesel  2018   27389 44018     7\n5 Ford         Mondeo         2   Diesel  2016   51724 28482     9\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n\n```{.r .cell-code}\nglimpse(diesel_less_10_year)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 2,040\nColumns: 10\n$ Manufacturer     <chr> \"Ford\", \"VW\", \"VW\", \"BMW\", \"Ford\", \"Porsche\", \"VW\", \"…\n$ Model            <chr> \"Fiesta\", \"Passat\", \"Passat\", \"X3\", \"Mondeo\", \"Cayenn…\n$ engine_size      <dbl> 1.0, 1.6, 1.4, 2.0, 2.0, 2.6, 1.2, 1.8, 1.4, 1.4, 1.4…\n$ fuel             <chr> \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Diesel\", \"Di…\n$ year             <dbl> 2017, 2018, 2020, 2018, 2016, 2019, 2018, 2016, 2020,…\n$ Mileage          <dbl> 38370, 22122, 21413, 27389, 51724, 20147, 37411, 2943…\n$ Price            <dbl> 16257, 36634, 39310, 44018, 28482, 76182, 19649, 3088…\n$ age              <dbl> 8, 7, 5, 7, 9, 6, 7, 9, 5, 7, 7, 9, 8, 3, 7, 3, 9, 7,…\n$ mileage_per_year <dbl> 4796.2500, 3160.2857, 4282.6000, 3912.7143, 5747.1111…\n$ price_category   <chr> \"midrange\", \"luxury\", \"luxury\", \"luxury\", \"midrange\",…\n```\n\n\n:::\n:::\n\n\n**Question:** How many diesel cars are less than 10 years old?\n\n**Your answer:** 2040\n\n# Exercise 5: Grouping and Summarizing\n\n## 5.1 Basic Summaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Calculate average price by manufacturer\navg_price_by_brand <- car_data %>%\n  group_by(Manufacturer) %>%\n  summarize(avg_price = mean(Price, na.rm = TRUE))\n\navg_price_by_brand\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Manufacturer avg_price\n  <chr>            <dbl>\n1 BMW             24429.\n2 Ford            10672.\n3 Porsche         29104.\n4 Toyota          14340.\n5 VW              10363.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Calculate average mileage by fuel type\navg_mile_by_fuel <- car_data |>\n  group_by(fuel) |>\n  summarize(avg_mile = mean(Mileage, na.rm = T))\n\navg_mile_by_fuel\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  fuel   avg_mile\n  <chr>     <dbl>\n1 Diesel  112667.\n2 Hybrid  111622.\n3 Petrol  112795.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Count cars by manufacturer\ncount_cars_by_brand <- car_data |>\n  group_by(Manufacturer) |>\n  summarize(count_car = n())\n\ncount_cars_by_brand\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 2\n  Manufacturer count_car\n  <chr>            <int>\n1 BMW               4965\n2 Ford             14959\n3 Porsche           2609\n4 Toyota           12554\n5 VW               14913\n```\n\n\n:::\n:::\n\n\n## 5.2 Categorical Summaries\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Frequency table for price categories\ncar_data |>\n  count(price_category) |>\n  mutate(percent = 100 * n / sum(n)) |>\n  select(-n)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 × 2\n  price_category percent\n  <chr>            <dbl>\n1 budget            68.1\n2 luxury            12.4\n3 midrange          19.6\n```\n\n\n:::\n\n```{.r .cell-code}\ncar_data\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50,000 × 10\n   Manufacturer Model      engine_size fuel    year Mileage Price   age\n   <chr>        <chr>            <dbl> <chr>  <dbl>   <dbl> <dbl> <dbl>\n 1 Ford         Fiesta             1   Petrol  2002  127300  3074    23\n 2 Porsche      718 Cayman         4   Petrol  2016   57850 49704     9\n 3 Ford         Mondeo             1.6 Diesel  2014   39190 24072    11\n 4 Toyota       RAV4               1.8 Hybrid  1988  210814  1705    37\n 5 VW           Polo               1   Petrol  2006  127869  4101    19\n 6 Ford         Focus              1.4 Petrol  2018   33603 29204     7\n 7 Ford         Mondeo             1.8 Diesel  2010   86686 14350    15\n 8 Toyota       Prius              1.4 Hybrid  2015   30663 30297    10\n 9 VW           Polo               1.2 Petrol  2012   73470  9977    13\n10 Ford         Focus              2   Diesel  1992  262514  1049    33\n# ℹ 49,990 more rows\n# ℹ 2 more variables: mileage_per_year <dbl>, price_category <chr>\n```\n\n\n:::\n:::\n\n\n\n# Submission Notes\n\n**To submit this lab:**\n1. Make sure your code runs without errors\n2. Fill in all the \"[YOUR ANSWER]\" sections and complete all of the empty code! \n3. Save this file in your portfolio's `lab_0/` folder\n4. Commit and push to GitHub\n5. Check that it appears on your GitHub Pages portfolio site\n\n**Questions?** Post on the canvas discussion board or come to office hours!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}